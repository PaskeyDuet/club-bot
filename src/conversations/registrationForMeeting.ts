import meetingsController from "../dbSetup/handlers/meetingsController";
import meetingsDetailsController from "../dbSetup/handlers/meetingsDetailsController";
import createFutureMeetingsList from "../helpers/createFutureMeetingsList";
import getFutureMeetings from "../helpers/getFutureMeetings";
import { mainMenu } from "../keyboards/generalKeyboards";
import {
  generateMeetingsKeyboard,
  meetingRegApprovedKeyboard,
} from "../keyboards/meetingsKeyboards";
import { MyContext, MyConversation } from "../types/grammy.types";
import { TextWithInlineKeyboardObj } from "../types/shared.types";
import chooseMeetingNumber from "./helpers/regForMeeting/chooseMeetingNumber";
import userFilteredMeetings from "./helpers/regForMeeting/userFilteredMeetings";

//TODO: –í –¥–∞–ª—å–Ω–µ–π—à–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ "–ß–µ–ª–æ–≤–µ–∫ - –Ω–æ–≤–∏—á–æ–∫"
export async function registrationForMeeting(
  conversation: MyConversation,
  ctx: MyContext
) {
  const futureMeetingsWithUsers =
    await meetingsController.futureMeetingsWithUsers();
  const futureMeetings = await getFutureMeetings();

  const availableRegs = userFilteredMeetings(
    futureMeetings,
    futureMeetingsWithUsers
  );

  const messageData: TextWithInlineKeyboardObj = {
    text: "",
  };
  if (availableRegs.length !== 0) {
    messageData.text +=
      "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏:\n\n";
    messageData.text += createFutureMeetingsList(availableRegs);
    messageData.text +=
      "\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüëáüèª";
    messageData.keyboard = generateMeetingsKeyboard(availableRegs);
  } else {
    //TODO: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö
    messageData.text += "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á. –ó–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ";
    messageData.keyboard = mainMenu;
  }

  await ctx.editMessageText(messageData.text, {
    reply_markup: messageData.keyboard,
  });

  await chooseMeetingNumber(conversation, ctx, messageData);

  const meetingId = conversation.session.temp.meetingNumber;

  if (meetingId) {
    await meetingsDetailsController.addUserToMeet(ctx.userId, meetingId);

    const currMeeting = futureMeetings.filter(
      (el) => el.meetingId === meetingId
    )[0];

    let finalMessage = "";
    finalMessage += `–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ –ø–æ —Ç–µ–º–µ <b>${currMeeting.topic}</b> `;
    finalMessage += `–∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–π–¥–µ—Ç <b>${currMeeting.date}</b> –≤ <b>${currMeeting.place}</b>\n\n`;
    finalMessage += `–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ç–µ–∫—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é\n`;
    finalMessage += `–ú—ã –æ–ø–æ–≤–µ—Å—Ç–∏–º –≤–∞—Å –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏ –∑–∞ –¥–µ–Ω—å –¥–æ –≤—Å—Ç—Ä–µ—á–∏`;
    await ctx.editMessageText(finalMessage, {
      reply_markup: meetingRegApprovedKeyboard,
      parse_mode: "HTML",
    });
  }
}
