import meetingsDetailsController from "../dbSetup/handlers/meetingsDetailsController";
import createFutureMeetingsList from "../helpers/createFutureMeetingsList";
import getFutureMeetings from "../helpers/getFutureMeetings";
import { mainMenu } from "../keyboards/generalKeyboards";
import { generateMeetingsKeyboard } from "../keyboards/meetingsKeyboards";
import { MyContext, MyConversation } from "../types/grammy.types";
import { TextWithInlineKeyboardObj } from "../types/shared.types";
import chooseMeetingNumber from "./helpers/chooseMeetingNumber";
import unlessActions from "./helpers/unlessActions";

export async function registrationForMeeting(
  conversation: MyConversation,
  ctx: MyContext
) {
  console.log(ctx.userId);

  const futureMeetings = await getFutureMeetings();
  const messageData: TextWithInlineKeyboardObj = {
    text: "",
  };
  if (futureMeetings.length !== 0) {
    messageData.text +=
      "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏:\n\n";
    messageData.text += createFutureMeetingsList(futureMeetings);
    messageData.text +=
      "\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüëáüèª";
    messageData.keyboard = generateMeetingsKeyboard(futureMeetings);
  } else {
    //TODO: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö
    messageData.text += "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á. –ó–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ";
    messageData.keyboard = mainMenu;
  }

  await ctx.editMessageText(messageData.text, {
    reply_markup: messageData.keyboard,
  });

  const { callbackQuery: cbQ } = await chooseMeetingNumber(
    conversation,
    ctx,
    messageData
  );
  const meetingId = cbQ.data.split("reg_for_meeting_")[1];
  const createdVisit = await meetingsDetailsController.addUserToMeet(
    ctx.userId,
    parseInt(meetingId)
  );
  console.log(createdVisit);
}
