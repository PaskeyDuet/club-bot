import { keyboard } from "#root/handlers/buttonRouters.ts";
import logErrorAndThrow from "#root/handlers/logErrorAndThrow.ts";
import meetingsController from "../dbSetup/handlers/meetingsController";
import meetingsDetailsController from "../dbSetup/handlers/meetingsDetailsController";
import createFutureMeetingsList from "../helpers/createFutureMeetingsList";
import getFutureMeetings from "../helpers/getFutureMeetings";
import { mainMenu } from "../keyboards/generalKeyboards";
import {
  generateMeetingsKeyboard,
  meetingRegApprovedKeyboard,
} from "../keyboards/meetingsKeyboards";
import { MyContext, MyConversation } from "../types/grammy.types";
import {
  MeetingsObject,
  TextWithInlineKeyboardObj,
} from "../types/shared.types";
import chooseMeetingNumber from "./helpers/regForMeeting/chooseMeetingNumber";
import userFilteredMeetings from "./helpers/regForMeeting/userFilteredMeetings";

//TODO: –í –¥–∞–ª—å–Ω–µ–π—à–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ "–ß–µ–ª–æ–≤–µ–∫ - –Ω–æ–≤–∏—á–æ–∫"
export async function registrationForMeeting(
  conversation: MyConversation,
  ctx: MyContext
) {
  try {
    const futureMeetingsWithUsers =
      await meetingsController.futureMeetingsWithUsers();
    const futureMeetings = await getFutureMeetings();
    [];

    if (!futureMeetings || !futureMeetingsWithUsers) {
      throw new Error("futureMeetings or futureMeetingsWithUsers is undefined");
    }

    const availableRegs = userFilteredMeetings(
      futureMeetings,
      futureMeetingsWithUsers
    );

    const baseMess = baseMessObj(availableRegs);
    await ctx.editMessageText(baseMess.text, {
      reply_markup: baseMess.keyboard,
    });

    await chooseMeetingNumber(conversation, ctx, baseMess);
    const meetingId = conversation.session.temp.meetingNumber;

    if (meetingId) {
      await meetingsDetailsController.addUserToMeet(ctx.userId, meetingId);

      const currMeeting = futureMeetings.find(
        (el) => el.meetingId === meetingId
      );
      if (!currMeeting) {
        throw new Error(
          "can't find currMeeting by meetingId inside regForMeeting"
        );
      }
      const isNewbie = ctx.session.user.isNewbie;
      const finalMessage = finalMessObj(currMeeting, isNewbie);
      await ctx.editMessageText(finalMessage.text, {
        reply_markup: finalMessage.keyboard,
        parse_mode: "HTML",
      });
    }
  } catch (err) {
    logErrorAndThrow(err, "fatal", "Can't registrate a user for a meeting");
  }
}

const baseMessObj = (
  availableRegs: MeetingsObject[]
): TextWithInlineKeyboardObj => {
  let text = "";
  let keyboard;
  if (availableRegs.length !== 0) {
    text += "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ ";
    text += "–¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏:\n\n";
    text += createFutureMeetingsList(availableRegs);
    text += "\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é ";
    text += "–≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüëáüèª";
    keyboard = generateMeetingsKeyboard(availableRegs);
  } else {
    text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á. –ó–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ";
    keyboard = mainMenu;
  }

  return {
    text,
    keyboard,
  };
};

const finalMessObj = (
  currMeeting: MeetingsObject,
  isNewbie: boolean
): TextWithInlineKeyboardObj => {
  let text = "";
  text += `–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ –ø–æ —Ç–µ–º–µ <b>${currMeeting.topic}</b> `;
  text += `–∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–π–¥–µ—Ç <b>${currMeeting.date}</b> –≤ <b>${currMeeting.place}</b>\n\n`;
  text += `–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ç–µ–∫—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é\n`;
  text += `–ú—ã –æ–ø–æ–≤–µ—Å—Ç–∏–º –≤–∞—Å –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏ –∑–∞ –¥–µ–Ω—å –¥–æ –≤—Å—Ç—Ä–µ—á–∏`;
  let keyboard = meetingRegApprovedKeyboard(isNewbie);
  return { text, keyboard };
};
